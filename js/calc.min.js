al.calc = function() {
    var e = {}, h = {}, n = function(t) {
        var n = $("#lvl"),
                r = n.val();
        for (n.children().remove(); t <= e.maxLvl; t++)
            n.append('<option value="' + t + '">' + t + "</option>");
        n.val(r);
    }, p = !1,
            m = [];
    var f = {
        c: null,
        f: null,
        b: null,
        s: null
    }, j = !1,
            k = !1;
    return {
        fields: {},
        talents: {},
        items: {},
        resource: {},
        desc: {},
        formuls: {},
        stats: {},
        builds: null,
        lvl: 0,
        url: "",
        setField: function(a) {
            void 0 === a.y && (a.y = null);
            void 0 === a.x && (a.x = null);
            0 <= a.preload && (m[a.z] = a.preload);
            this.fields[a.z] = eval("al.calc." + a["class"] + "(" + a.z + "," + a.y + "," + a.x + ")");
            this.fields[a.z].init(a);
        },
        init: function(e) {
            p || (p = !0, this.addConfig(e, !0), this.userBuilds(), "" !== this.urlManager.getCmd() && this.loadData(), $("a.data").click(function() {
                window.location.href = $(this).attr("href");
				alert(window.location.href);
				al.calc.setField({"load": "calc", "preload": -1, "class": "AORField", "y": 9, "x": 7, "z": 1});
				al.calc.setField({"load": "calc", "preload": -1, "class": "AORField", "y": 9, "x": 7, "z": 2});
				al.calc.setField({"load": "calc", "preload": -1, "class": "AORField", "y": 9, "x": 7, "z": 3});
                al.calc.loadData();
                return !1;
            }), $("#load").click(function() {
				//al.calc.load();
				window.prompt("Ctrl + C to copy build link", window.location.href);
                return !1;
            }), $("#save").click(function() {
                al.calc.save();
                return !1;
            }), $(".clear_button").click(function() {
                al.calc.locked && al.calc.lock(!1);
                var e = $(this);
                "clear_all" === e.attr("id") ? al.calc.clear() : (e = e.attr("id").split("_"), al.calc.fields[e[1]].clear());
            }), $("#lock").click(function() {
                al.calc.lock();
            }), $("#buildInfo").mouseenter(function() {
                var e = $(this);
                e.hasClass("loaded") && al.desc.show(e, e.html());
            }).mouseleave(function() {
                al.desc.hide();
            }), $("#random").click(function() {
                al.calc.loadRandom();
            }), $("#confirmSave>div").first().click(function() {
                al.sheet.hide();
                al.calc.save();
            }), $("#confirmSave>div:last-child").click(function() {
                al.sheet.hide();
            }), $("#confirmLock>div").first().click(function() {
                al.sheet.hide();
                al.calc.lock();
            }), $("#confirmLock>div:last-child").click(function() {
                al.sheet.hide();
            }), $("#showAbout").click(function() {
                al.sheet.show(function() {
                    $("#about").hide();
                    al.sheet.hide();
                }, $("#about"));
                return !1;
            }), $("#showFAQ").click(function() {
                al.sheet.show(function() {
                    $("#faq").hide();
                    al.sheet.hide();
                }, $("#faq"));
                return !1;
            }), $("#faq a:not(#faq p>a)").click(function() {
                $(this).next().slideToggle();
                return !1;
            }), $("#search").keyup(function() {
                al.calc.search(this.value);
            }));
        },
        userBuilds: function() {
            null == al.getUser() ? setTimeout("al.calc.userBuilds()", 3e3) : al.getUser().isGuest || $.getJSON("data/builds.json", function(e) {
                al.calc.builds = e;
            });
        },
        urlManager: {
            get: function() {
                var e = window.location.href.split("#");
                if (!j && 1 < e.length) {
                    var e = e[1].split("/"),
                            t = e[0],
                            t = t.split(":"),
                            n = t[0],
                            n = n.split("-");
                    f.c = {};
                    for (var r in n)
                        f.c[r] = n[r];
                    void 0 !== t[1] && (f.b = t[1]);
                    if (void 0 !== e[1]) {
                        f.f = [];
                        t = e[1].split(":");
                        for (r = 0; r < t.length; r++)
                            f.f[r] = t[r];
                        if (void 0 !== e[2]) {
                            e = e[2];
                            f.s = {};
                            for (t = /([A-z]+):(\d+)/g; null != (r = t.exec(e)); )
                                f.s[r[1]] = r[2];
                        }
                    }
                    j = !0;
                }
                return f;
            },
            set: function(e, t, n, r) {
                "b" == e ? (f.b = t, k = !0) : (void 0 === n && (n = 0), null == f[e] && (f[e] = []), f[e][n] = t, k = !1);
                j = !1;
                return void 0 === r && "" == al.calc.url ? this.update() : !0;
            },
            update: function() {
                var e = "#";
                if (null == f.c)
                    return e;
                var t = "",
                        n;
                for (n in f.c)
                    "" != t && (t += "-"), t += f.c[n];
                e += t;
                if (null != f.b && k)
                    e += ":" + f.b;
                else if (null != f.f || null != f.s) {
                    e += "/";
                    if (null != f.f) {
                        t = "";
                        for (n = 0; n < f.f.length; n++)
                            "" != t && (t += ":"), void 0 !== f.f[n] && (t += f.f[n]);
                        e += t;
                    }
                    if (null != f.s && (e += "/", null != f.s))
                        for (n in f.s)
                            e += n + ":" + f.s[n];
                }
                return window.location.href = e;
            },
            getCmd: function() {
                var e = "";
                this.get();
                if (null == f.c)
                    return e;
                var t = "",
                        n;
                for (n in f.c)
                    "" != t && (t += "-"), t += f.c[n];
                e = e + t + "/";
                if (null != f.f) {
                    t = "";
                    for (n = 0; n < f.f.length; n++)
                        "" != t && (t += ":"), void 0 !== f.f[n] && (t += f.f[n]);
                    e += t;
                }
                if (null != f.s && (e += "/", null != f.s))
                    for (n in f.s)
                        e += n + ":" + f.s[n];
                return e;
            },
            loadFromCmd: function(e, t) {
                e = e.split("/");
                if ("" != e[0]) {
                    var n = e[0].split(":");
                    void 0 !== n[1] && void 0 == t && this.set("b", n[1], 0, !0);
                    var n = n[0].split("-"),
                            r;
                    for (r in n)
                        this.set("c", n[r], r, !0);
                    if (void 0 !== e[1]) {
                        n = e[1].split(":");
                        for (r in n)
                            this.set("f", n[r], r, !0);
                        if (void 0 !== e[2])
                            for (r = /([A-z]+):(\d+)/g; null != (n = r.exec(e[2])); )
                                this.set("s", n[2], n[1], !0);
                    }
                }
                j = !0;
                void 0 !== t ? (this.set("b", t), al.calc.loadData(!0)) : al.calc.loadData();
            },
            unload: function() {
                f = {
                    c: null,
                    f: null,
                    b: null,
                    s: null
                };
                k = j = !1;
            }
        },
        loadData: function(t) {
            void 0 != window._gaq && _gaq.push(["_trackPageview", "/" + /#([^\/]+)(\/.+)?$/.exec(window.location.href)[1]]);
            $("#main").remove();
            $("#calc").show();
            !al.empty(h["class"]) && void 0 === t && this.unload();
            al.inArray("formuls", e.data) && al.empty(h.formuls) && this.loadFormuls();
            if (null !== this.urlManager.get().b && void 0 === t)
                this.loadBuild();
            else if (al.inArray("class", e.data)) {
                var n, t = this.urlManager.get().c;
                for (n in t) {
                    if (void 0 === h["class"] || void 0 === h["class"][t[n]]) {
                        $.getJSON("data/" + t[n] + ".json", function(e) {
                            for(var talent in e.talents) {
                                e.talents[talent].line = e["class"].line;
                            }
                            al.calc.setData("class", e, e["class"].calcUrl);
                            al.calc.loadClass(e["class"].calcUrl);
                            al.calc.loadFields();
                        });
                    } else {
                        al.calc.loadClass(t[n]);
                        al.calc.loadFields();
                    }
                }
            }
        },
        loadBuild: function() {
            var e = this.urlManager.get();
            $.getJSON(this.url + "/calc/build/load?class=" + e.c[0] + "&url=" + e.b + "&callback=?", function(e) {
                al.calc.urlManager.loadFromCmd(e.cmd, e.url);
                var t = $("#buildInfo");
                t.addClass("loaded");
                t = t.children().first();
                0 == e.system ? t.children().html(e.author) : t.children().html("random");
                t = t.next();
                t.children().html(e.date);
            });
        },
        setData: function(e, t, n) {
            void 0 !== n ? (void 0 === h[e] && (h[e] = {}), h[e][n] = t) : h[e] = t;
        },
        loadFormuls: function() {
            (function(e) {
                for (var t in e.desc)
                    al.calc.desc[t] = al.calc.func(e.desc[t]);
                for (t in e.formuls)
                    al.calc.formuls[t] = al.calc.func(e.formuls[t].replace(/<br\/>/g, "\n"));
                for (t in e.stats)
                    al.calc.stats[t] = al.calc.stat(e.stats[t]);
                al.calc.modifiers = e.modifiers;
                al.calc.setData("formuls", e);
            })(formuls);
        },
        loadClass: function(e) {
            var t = h["class"][e];
            "0" !== t["class"].calcOfficer ? $("#classMaster a").html(t["class"].calcOfficer).attr("href", t["class"].calcOfficerBlog) : $("#classMaster a").html("Open").attr("href", "#");
            for (var n in t.talents)
                al.calc.addTalent(t.talents[n]);
            for (n in t.mosaic)
                al.calc.fields[t.mosaic[n].z].add(t.mosaic[n].y, t.mosaic[n].x, t.mosaic[n].talent);
            for (n in al.calc.talents)
                al.calc.talents[n].addLock();
            t = $("#search");
            if (0 < t.length) {
                var r = al.count(al.calc.talents),
                        r = Math.floor(Math.random(0, al.calc.talents) * (r + 1)),
                        i = 0;
                for (n in al.calc.talents)
                    i++ == r && (r = n);
                t.attr("placeholder", t.attr("placeholder").replace(/:[^,]+,/, ": " + al.calc.talents[r].attr("title") + ","));
            }
            t.keyup();
			$('a[href^="#"]').removeClass("active");
            $('a[href="#' + e + '"]').addClass("active");
        },
        loadFields: function() {
            var e = this.urlManager.get().f,
                    t;
            for (t in m)
                cmd = null === e || void 0 == e[t] ? null : e[t], this.fields[t].load(cmd);
            for (t in this.fields)
                void 0 === m[t] && (cmd = null === e || void 0 == e[t] ? null : e[t], this.fields[t].load(cmd));
            null !== this.urlManager.get().b && this.lock(!1);
        },
        getPosition: function(e) {
            e = e.split("_");
            return {
                z: e[1],
                y: e[2],
                x: e[3]
            };
        },
        classicInit: function(e) {
            $("#mosaic_field_" + e).find(".cell").unbind("click").click(function() {
                var e = al.calc.getPosition($(this).attr("id"));
                al.calc.fields[e.z].locked ? al.calc.lock(!1) : (al.calc.fields[e.z].plus(e.y, e.x), $(this).mouseenter());
                return !1;
            }).unbind("contextmenu").bind("contextmenu", function() {
                var e = al.calc.getPosition($(this).attr("id"));
                al.calc.fields[e.z].locked ? al.calc.lock(!1) : (al.calc.fields[e.z].minus(e.y, e.x), $(this).mouseenter());
                return !1;
            }).unbind("mouseenter").mouseenter(function() {
                var e = al.calc.getPosition($(this).attr("id"));
                e.text = al.calc.fields[e.z].desc(e.y, e.x);
                "" != e.text && al.desc.show($(this), e.text);
            }).unbind("mouseleave").mouseleave(function() {
                al.desc.hide();
            });
        },
        classicMinInit: function(e) {
            $("#mosaic_field_" + e).children(".cell").unbind("contextmenu").bind("contextmenu", function() {
                return !1;
            }).unbind("mouseenter").mouseenter(function() {
                var e = al.calc.getPosition($(this).attr("id"));
                e.text = al.calc.fields[e.z].desc(e.y, e.x);
                "" != e.text && al.desc.show($(this), e.text)
            }).unbind("mouseleave").mouseleave(function() {
                al.desc.hide();
            })
        },
        addConfig: function(t, r) {
            e = t;
            for (var i in e.resource)
                void 0 === e.resource[i].start && (e.resource[i].start = 1), void 0 == e.resource[i].minLvl && (e.resource[i].minLvl = 1), void 0 == e.resource[i].perLvl && (e.resource[i].perLvl = 1), e.resource[i]._max = 0, e.resource[i]._bonus = 0, void 0 == e.resource[i].specialLvl ? e.resource[i].specialLvl = null : void 0 === e.resource[i].specialLvl.multiple && void 0 === e.resource[i].specialLvl.lvls ? e.resource[i].specialLvl = null : void 0 !== e.resource[i].specialLvl.multiple && void 0 === e.resource[i].specialLvl.bonus && (e.resource[i].specialLvl = null);
            n(t.startLvl);
            $("#lvl").change(function() {
                al.calc.setLvl($(this).val());
            });
            this.setLvl(t.startLvl, r);
        },
        setLvl: function(t, n) {
            this.lvl = t;
            this.lvl > e.maxLvl ? this.lvl = e.maxLvl : this.lvl < e.minLvl && (this.lvl = e.minLvl);
            this.calcResource();
            $("#lvl").val(this.lvl);
            if (void 0 === n)
                for (var r in this.fields)
                    this.fields[r].check();
            return this.lvl;
        },
        currentLvl: function() {
            var t = e.minLvl,
                    r;
            for (r in this.fields)
                l = this.fields[r].getLvl(), t < l && 0 < l && (t = l);
            $("#current_lvl").html(t + " of " + this.lvl);
            n(t);
            return t;
        },
        setResource: function(t, n) {
            $("#" + t + "_count").html(n + " of " + (e.resource[t]._max + e.resource[t]._bonus));
        },
        addResourceBonus: function(t, n) {
            void 0 === n && (n = 1);
            if (0 > n && 0 > this.resource[t] + n)
                return !1;
            e.resource[t]._bonus += n;
            this.resource[t] += n;
            al.calc.calcResource();
            for (var r in al.calc.fields)
                al.calc.fields[r].resource && al.calc.fields[r].resource == t && al.calc.fields[r].check(!0);
            return e.resource[t]._bonus;
        },
        calcResource: function() {
            for (var t in e.resource)
                current = null, this.lvl >= e.resource[t].minLvl ? (0 != e.resource[t]._max && (current = e.resource[t]._max - this.resource[t] + e.resource[t]._bonus), this.resource[t] = (this.lvl - e.resource[t].minLvl) * e.resource[t].perLvl + e.resource[t].start, null !== e.resource[t].specialLvl && void 0 !== e.resource[t].specialLvl.multiple && (this.resource[t] += Math.floor(this.lvl / e.resource[t].specialLvl.multiple) * e.resource[t].specialLvl.bonus)) : this.resource[t] = 0, e.resource[t]._max = this.resource[t], null !== current && (this.resource[t] -= current - e.resource[t]._bonus), this.setResource(t, this.resource[t]);
        },
        getResourceMax: function(t) {
            return void 0 === t || void 0 === e.resource[t] ? null : {
                max: e.resource[t]._max,
                bonus: e.resource[t]._bonus
            };
        },
        addTalent: function(e) {
			var ele = e.element;
            e.lvl = 0;
            e.lvlMax = void 0 !== e.lvls ? al.count(e.lvls) : "nullic" === e.name ? 99999 : 0;
            var t = "";
            var n = function(t, n, r, i) {
                void 0 === i && (i = !1);
                t = i ? t.replace("!lvl", al.calc.desc.nextLvl.exec(n)) : t.replace("!lvl", al.calc.desc.lvl.exec(n));
                void 0 !== r.mosaic && "nullic" !== r.attr("name") && (i ? (i = al.calc.fields[r.mosaic.z].cost(r.mosaic.y, r.mosaic.x, n), t = t.replace("!cost", al.calc.desc.cost.exec({
                    cost: i,
                    mosaic: r.mosaic,
                    r: al.calc.resource[al.calc.talents[e.name].resource] >= i
                }))) : t = t.replace("!cost", ""), t = null != r.attr("element1") ? t.replace("!element", al.calc.desc.element.exec(r.attr("element"))) : t.replace("!element", ""), _clvl = r.attr("lvls", n), t = void 0 !== _clvl.range ? t.replace("!range", al.calc.desc.range.exec(_clvl.range)) : t.replace("!range", ""), t = void 0 !== _clvl.radius ? t.replace("!radius", al.calc.desc.radius.exec(_clvl.radius)) : t.replace("!radius", ""), void 0 !== _clvl.mana ? (t = t.replace("!mana", al.calc.desc.mana.exec(_clvl.mana)), t = t.replace("!energy", al.calc.desc.energy.exec(_clvl.mana))) : (t = t.replace("!mana", ""), t = t.replace("!energy", "")), void 0 !== _clvl.time ? (t = t.replace("!time ", al.calc.desc.time.exec(_clvl.time)), t = t.replace("!channeling", al.calc.desc.channeling.exec(_clvl.time))) : (t = t.replace("!time", ""), t = t.replace("!channeling", "")), t = void 0 !== _clvl.cooldown ? t.replace(/!coold(a|o)wn/, al.calc.desc.cooldown.exec(_clvl.cooldown)) : t.replace(/!coold(a|o)wn/, ""), t = 0 != e.preparation ? t.replace("!preparation", al.calc.desc.preparation.exec()) : t.replace("!preparation", ""), t = t.replace(/!d([\s\S]*)/gm, '<div class="talent_desc">$1</div>'), t = t.replace(/!e(\d+)/g, function(e, t) {
                    return al.calc.eval(_clvl.e[t].e);
                }), t = t.replace(/!damage/g, function() {
                    return al.calc.eval(_clvl.damage);
                }), t = t.replace(/!ge(\d+)/g, function(e, t) {
                    return al.calc.eval(r.attr("globalEffect" + t));
                }));
                return al.calc.eval(t);
            };
            al.calc.talents[e.name] = {
                mosaic: {},
                mosaics: [],
                addMosaic: function(e) {
                    this.mosaic = e;
                    this.mosaics[this.mosaics.length] = e;
                },
                attr: function(t, n) {
                    void 0 === n && (n = 0);
                    return "lvls" == t && void 0 !== e.lvls ? 0 == n ? e.lvls : e.lvls[n] : void 0 !== e[t] ? e[t] : void 0 !== e.lvls && void 0 !== e.lvls[e.lvl] && void 0 !== e.lvls[e.lvl][t] ? e.lvls[e.lvl][t] : null;
                },
                attrMinLvl: function(t, n) {
                    e.lvl > n && (n = e.lvl);
                    return void 0 !== e.lvls && void 0 !== e.lvls[n] && void 0 !== e.lvls[n][t] ? e.lvls[n][t] : null
                },
                changeLvl: function(t) {
                    void 0 === t && (t = 1);
                    if (e.lvl == e.lvlMax && 0 < t || 0 == e.lvl && 0 > t)
                        return 0;
                    e.lvl + t > e.lvlMax ? t = e.lvl + t - e.lvlMax : 0 > e.lvl + t && (t = 0 - e.lvl);
                    e.lvl += t;
                    0 != t && al.calc.flush();
                    return t;
                },
                setLvl: function(t) {
                    if (t > e.lvl)
                        t > e.lvlMax && (t = e.lvlMax), t -= e.lvl;
                    else if (t < e.lvl)
                        0 > t && (t = 0), t -= e.lvl;
                    else
                        return 0;
                    e.lvl += t;
                    0 != t && al.calc.flush();
                    return t;
                },
                getE: function(t, n) {
                    void 0 === t && (t = 1);
                    void 0 === n && (n = e.lvl);
                    if (0 == n)
                        if (void 0 !== this.defaultLvl)
                            n = this.defaultLvl;
                        else
                            return 0;
                    return e.lvls[n].e[t].e
                },
                getEMinLvl: function(t, n) {
                    void 0 === t && (t = 1);
                    n < e.lvl && (n = e.lvl);
                    if (0 == n)
                        return 0;
                    void 0 == e.lvls[n] && (n = 1);
                    return e.lvls[n].e[t].e;
                },
                getDesc: function() {
                    if ("" === t) {
                        var r = /^![^\.]+\.d/.test(e.body);
                        var i = e.body.replace(/"([^"]+)"/g, function(e, t) {
                            return "<g>" + t + "</g>";
                        });
						t = "";
						if (ele) {
							t = al.calc.desc.element.exec(ele);
						}
                        r || (t += '<div class="talent_name">' + e.title + "</div>");
						
                        var s = al.calc.talents[e.name];
                        0 < e.lvl && (t += n(i, e.lvl, s));
                        e.lvl < e.lvlMax && !r && (t += '<div class="talent_hr"></div>' + n(i, e.lvl + 1, s, !0));
                        t = void 0 !== s.attr("modifiers")[0] ? t.replace(/!do/g, function() {
                            return al.calc.desc["do"].exec({
                                a: s.attr("modifiers")[0]
                            });
                        }) : t.replace("!do", "");
                        r = s.attr("links");
                        if (0 < al.count(r)) {
                            var o = 0;
                            1 == r[0].is_condition && (t += '<div class="links_head">Requirements</div>');
                            for (var u in r) {
                                0 == r[u].is_condition && 0 == o && (t += '<div class="links_head clear">Connection</div>', o = 1);
                                _tlink = al.calc.talents[r[u].link];
                                _tlinkLvl = _tlink.attr("lvl");
                                t += '<div class="talent_link lvl_' + r[u].lvl;
                                0 == _tlink.attr("lvl") && (t += " disabled", _tlinkLvl = 1);
                                i = "";
                                "" != r[u].func && (i = r[u].condition, 1 !== al.calc.formuls[r[u].func].exec(1) ? (t += " disabled", i = "<b>" + i + "</b>") : i = "<i>" + i + "</i>");
                                t += '">';
                                if (0 == r[u].real_ico && _tlink.attr("line")) {
                                    var isRuby = al.calc.talents[r[u].link].mosaic.z != 0;
                                    var line = _tlink.attr("line");
                                    if (isRuby) {
                                        line = line.replace('.png', '_v.png');
                                    }
                                    t += '<div style="background:url(' + al.staticPath + "themes/calc" + line + ") no-repeat -" + _tlink.attr("icoPosition") + 'px 0;float:left"></div>';
                                } else {
                                    t += '<img src="' + al.staticPath + "http://eu.allodswiki.ru/" + _tlink.attr("ico") + '"/>';
                                }
                                t += "<span><b>" + _tlink.attr("title"), 0 < _tlink.attr("lvl") && (t += " [" + _tlinkLvl + "]"), t += "</b>", "" !== i && (t += "<i>Required: " + i + "</i>");
                                i = r[u].body.replace(/"([^"]+)"/g, function(e, t) {
                                    return "<g>" + t + "</g>";
                                });
                                i = i.replace(/!e(\d+)/g, function(e, t) {
                                    return al.calc.eval(_tlink.getE(t, _tlinkLvl));
                                });
                                t += "<p>" + al.calc.eval(i) + "</p>";
                                t += "</span></div>";
                            }
                            t += '<div class="clear"></div>';
                        }
                        t = t.replace(/\*([^\*]+)\*/g, function(e, t) {
                            return "<h>" + t + "</h>";
                        });
                        t = t.replace(/\^([^\^]+)\^/g, function(e, t) {
                            return "<w>" + t + "</w>";
                        });
						t = t.replace(/\#([^\#]+)\#/g, function(e, t) {
                            return "<bl>" + t + "</bl>";
                        });
						t = t.replace(/\\([^\\]+)\\/g, function(e, t) {
                            return "<wu>" + t + "</wu>";
                        });
						
                    }
                    if ("nullic" !== e.name) {
                        $(".link").removeClass("link");
                        $(".linked").removeClass("linked");
                        $(".clone").removeClass("clone");
                    }
                    u = null;
                    if (0 < al.count(e.links))
                        for (var f in e.links) {
                            u = al.calc.talents[e.links[f].link];
                            for (var l in u.mosaics)
                                $("#mosaic_" + u.mosaics[l].z + "_" + u.mosaics[l].y + "_" + u.mosaics[l].x).addClass("link");
                        }
                    if (0 < al.count(e.linked))
                        for (f in e.linked)
                            for (l in u = al.calc.talents[e.linked[f].talent], u.mosaics)
                                $("#mosaic_" + u.mosaics[l].z + "_" + u.mosaics[l].y + "_" + u.mosaics[l].x).addClass("linked");
                    if (1 < this.mosaics.length)
                        for (l in this.mosaics)
                            $("#mosaic_" + this.mosaics[l].z + "_" + this.mosaics[l].y + "_" + this.mosaics[l].x).addClass("clone");
                    return t;
                },
                flush: function() {
                    t = "";
                },
                addLock: function() {
                    if (void 0 !== e.locks)
                        for (var t in e.locks)
                            void 0 === this.mosaic || void 0 === al.calc.talents[e.locks[t].parent] || void 0 === al.calc.talents[e.locks[t].parent].mosaic ? e.locks[t] = null : al.calc.fields[this.mosaic.z].addLock(this.mosaic.y, this.mosaic.x, al.calc.talents[e.locks[t].parent].mosaic, e.locks[t].side);
                }
            };
        },
        addItem: function(a, b) {
            al.calc.items[b] = {
                attr: function(e) {
                    return void 0 !== a[e] ? a[e] : void 0 !== a.misc && void 0 !== a.misc[e] ? a.misc[e] : null;
                },
                call: function(b, d) {
                    void 0 === d && (d = "");
                    return "function" == typeof a[b] ? eval("a." + b + "(" + d + ")") : null;
                }
            };
        },
        removeItem: function(e) {
            al.calc.items[e] = null;
        },
        evaluated: [],
        eval: function(a, b) {
            void 0 === b && (b = !1);
            var c = a += "";
            if (void 0 !== this.evaluated[c])
                return this.evaluated[c];
            a = a.replace(/\$([A-z]+)/g, function(e, t) {
                return al.calc.stats[t].get();
            });
            a = a.replace(/\#(\d+)\.([-_A-z0-9]+)/g, function(e, t, n) {
                return void 0 === al.calc.items[t] ? 1 : al.calc.items[t].attr(n);
            });
            a = a.replace(/!([-_A-z]+)\.([A-z0-9]+)/g, function(e, t, n) {
                if (void 0 === al.calc.talents[t])
                    return 0;
                var e = al.calc.talents[t];
                var r = "";
                if (/^e\d+$/.test(n)) {
                    r = n.replace("e", "");
                    r = e.getE(r);
                } else {
                    if ("d" === n)
                        return al.calc.talents[t].getDesc();
                    if (/^ge\d+$/.test(n)) {
                        r = n.replace("ge", "");
                        r = al.calc.talents[t].attr("globalEffect" + r);
                    } else {
                        if (/^e\d+ml\d+/.test(n)) {
                            r = n.replace("e", "").split("ml");
                            r = e.getEMinLvl(r[0], r[1]);
                        } else {
                            if (/ml\d+$/.test(n)) {
                                r = n.split("ml");
                                n = n.replace(/ml\d+$/, "");
                                r = e.attrMinLvl(n, r[1]);
                            } else {
                                r = e.attr(n);
                            }
                        }
                    }
                }
                r += "";
                /![^\.\(]+[\.\(]/.test(r) && (r = al.calc.eval(r));
                return r;
            });
            a = a.replace(/!([^\(\s\.]+)\(([^\)]+)\)+/g, function(e, t, n) {
                if (void 0 === al.calc.formuls[t])
                    return 0;
                e = al.calc.formuls[t];
                /^!([^\(\s\.]+)\(([^\)]+)$/.test(n) && (n = al.calc.eval(n + ")") + "");
                var n = n.split(","),
                        t = {}, r;
                for (r in n)
                    t[al.calc.convertNS(new Number(r) + 10, 10, 36)] = n[r];
                return e.exec(t);
            });
            a = a.replace(/<:([^\:]+):>/g, function(e, t) {
                return al.calc.eval(t);
            });
            try {
                a = new Number(eval(a).toFixed(2));
            } catch (d) {
            }
            return this.evaluated[c] = a;
        },
        func: function(a) {
            return {
                exec: function(b) {
                    void 0 === b && (b = "");
                    if ("object" == typeof b) {
                        for (var c in b)
                            "string" == typeof b[c] && !al.inArray(b[c], ["+", "-", "*", "/"]) && (b[c] = al.calc.eval(b[c], !0));
                        b = JSON.stringify(b);
                    } else
                        "string" == typeof b && (b = "'" + al.calc.eval(b) + "'");
                    return eval("(function(p){" + al.calc.eval(a) + "})(" + b + ")");
                }
            };
        },
        stat: function(a) {
            a.body = a.body.replace(/<br\/>/g, "");
            var b = a.default1;
            return {
                set: function(e) {
                    b = e;
                    al.calc.flush();
                },
                get: function() {
                    return eval("(function(p){" + a.body + "})({value:'" + b + "'})");
                },
                value: function() {
                    return b;
                },
                dvalue: function() {
                    return a.default1;
                },
                clear: function() {
                    this.set(a.default1);
                }
            };
        },
        convertNS: function(e, t, n) {
            return parseInt(e, t).toString(n);
        },
        binEncode: function(e) {
            for (var t = "", n = "", e = e + "", r = 0; r < e.length; r += 53)
                52 < r && (n = "1"), t += this.convertNS(n + e.substr(r, 53), 2, 36);
            return t;
        },
        binDecode: function(e) {
            for (var t = "", n = "", r = 0; r < e.length; r += 11)
                n = this.convertNS(e.substr(r, 11), 36, 2), 10 < r && (n = n.substr(1)), t += n;
            return t;
        },
        decEncode: function(e) {
            for (var t = "", n = "", e = e + "", r = 0; r < e.length; r++)
                n = this.convertNS(e.charAt(r), 10, 2), 1 == n.length && (n = "0" + n), t += n;
            return this.binEncode(t);
        },
        decDecode: function(e) {
            var t = "",
                    n = "",
                    e = this.binDecode(e);
            0 !== e.length % 2 && (e = "0" + e);
            for (var r = 0; r < e.length; r += 2)
                n = this.convertNS(e.substr(r, 2), 2, 10), t += n;
            return t;
        },
        clear: function() {
            for (var e in this.fields)
                this.fields[e].clear();
        },
        flush: function() {
            for (var e in this.talents)
                this.talents[e].flush();
            this.evaluated = [];
        },
        save: function(a, b) {
            if (al.getUser().isGuest)
                message.add("Login to save a build");
            else if (void 0 !== a) {
                var c = {
                    name: a,
                    "class": this.urlManager.get().c[0],
                    cmd: this.urlManager.getCmd()
                };
                if (void 0 !== b || "" !== b)
                    c.url = b;
                ajaxReply("saveBuild", "Saving...");
                $.ajax({
                    url: "/calc/build/save",
                    data: c,
                    success: function(a) {
                        a = eval("(" + a + ")");
                        0 == a.error && (al.calc.urlManager.set("b", a.build.url), al.calc.hideDialogs(), al.calc.builds[a.build.url] = a.build);
                        ajaxReply("saveBuild", a);
                    }
                });
            } else {
                var d = $("#saveBuild").offset({
                    left: -1e3
                }).show();
                al.sheet.show(function() {
                    al.calc.hideDialogs();
                });
                var e = al.sheet.get(d);
                d.offset(e);
                d.find(".button").unbind("click").click(function() {
                    al.calc.save($("#buildName").val(), $("#buildUrl").val())
                });
                if (null != this.builds) {
                    d = $("#selfBuild").children("ul");
                    d.children().remove();
                    e = "";
                    for (c in this.builds)
                        0 == this.builds[c].system && (e = '<li build="' + c + '">', e += '<div class="ico ' + this.builds[c]["class"].calcUrl + '"></div>', e += this.builds[c].name + " [" + this.builds[c].date + "]<br/>", e += "#" + this.builds[c]["class"].calcUrl + ":" + this.builds[c].url + "</li>", d.append(e));
                    d.children().click(function() {
                        var e = $(this).attr("build");
                        $("#buildName").val(al.calc.builds[e].name);
                        $("#buildUrl").val(al.calc.builds[e].url);
                    });
                    $("#selfBuild").show();
                    c = this.urlManager.get().b;
                    null !== c && void 0 !== this.builds[c] && 0 == this.builds[c].system && ($("#buildName").val(this.builds[c].name), $("#buildUrl").val(this.builds[c].url));
                }
            }
        },
        deleteBuild: function(a) {
            ajaxReply("deleteBuild", "Deleting...");
            $.ajax({
                url: "/calc/build/delete?id=" + a,
                success: function(a) {
                    a = eval("(" + a + ")");
                    0 == a.error && (delete al.calc.builds[a.build], al.calc.load());
                    ajaxReply("deleteBuild", a);
                }
            });
        },
        load: function() {
            if (null !== this.builds) {
                var e = $("#loadBuild").find("ul");
                e.children().remove();
                var t = "",
                        n;
                for (n in this.builds)
                    t = '<li build="' + n + '">', t += '<div class="ico ' + this.builds[n]["class"].calcUrl + '"></div>', t += this.builds[n].name + " [" + this.builds[n].date + "]<br/>", t += "#" + this.builds[n]["class"].calcUrl + ":" + this.builds[n].url, t += '<i _id="' + this.builds[n].id + '">remove</i></li>', e.append(t);
                e.children().click(function() {
                    var e = al.calc.builds[$(this).attr("build")];
                    window.location.href = "#" + e["class"].calcUrl + ":" + e.url;
                    al.calc.loadData();
                    al.calc.hideDialogs();
                });
                e.find("i").click(function() {
                    al.calc.deleteBuild($(this).attr("_id"));
                    return !1;
                });
                e = $("#loadBuild");
                e.animate({
                    left: -1e3
                }, 0).show();
                al.sheet.show(function() {
                    al.calc.hideDialogs();
                });
                t = al.sheet.get(e);
                e.animate(t, 0);
            } else
                message.add("You have no saved build");
        },
        loadRandom: function() {
            ajaxReply("random", "Choosing random build...");
            var e = this.urlManager.get().c;
            $.getJSON("http://calc.aolive.ru/calc/build/random?class=" + e[0] + "&callback=?", function(e) {
                var t = al.calc.urlManager.get().c;
                window.location.href = "#" + t[0] + ":" + e[0];
                ajaxReply("random", "Build chosen");
                al.calc.loadData();
            });
        },
        hideDialogs: function() {
            $("#saveBuild").hide();
            $("#loadBuild").hide();
            al.sheet.hide();
        },
        unload: function() {
            this.locked && this.lock();
            this.urlManager.unload();
            this.addConfig(e, !0);
            $(".cell").removeClass("link linked clone search");
            for (var t in this.fields)
                this.fields[t].unload();
        },
        locked: !1,
        lock: function(e) {
            void 0 === e && (e = !0);
            if (this.locked)
                if (e) {
                    for (t in this.fields)
                        this.fields[t].unlock();
                    $("#lock").removeClass("active");
                    this.locked = !1;
                } else
                    al.sheet.show(function() {
                        $("#confirmLock").hide();
                        al.sheet.hide();
                    }, $("#confirmLock"), !0);
            else {
                for (var t in this.fields)
                    this.fields[t].lock();
                $("#lock").addClass("active");
                this.locked = !0;
                e && al.sheet.show(function() {
                    $("#confirmSave").hide();
                    al.sheet.hide();
                }, $("#confirmSave"), !0);
            }
        },
        search: function(e) {
            $(".search").removeClass("search");
            if (2 < e.length) {
                var t = !1,
                        n = [],
                        e = RegExp(e, "i"),
                        r;
                for (r in this.talents) {
                    t = !1;
                    e.test(this.talents[r].attr("name") + this.talents[r].attr("title") + this.talents[r].attr("element") + this.talents[r].attr("body")) && (t = !0);
                    var n = this.talents[r].attr("modifiers"),
                            i;
                    for (i in n)
                        0 < n[i].modifier && e.test(al.calc.modifiers[n[i].modifier].name + al.calc.modifiers[n[i].modifier].title + n[i].body) && (t = !0);
                    if (t)
                        for (i in this.talents[r].mosaics)
                            $("#mosaic_" + this.talents[r].mosaics[i].z + "_" + this.talents[r].mosaics[i].y + "_" + this.talents[r].mosaics[i].x).addClass("search");
                }
            }
        }
    };
}();
